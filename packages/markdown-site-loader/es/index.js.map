{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,GAAG,MAAM,UAAU,CAAC;AAC3B,OAAO,EAA2B,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAChF,OAAO,cAAc,MAAM,gBAAgB,CAAC;AAC5C,OAAO,WAAW,MAAM,cAAc,CAAC;AACvC,OAAO,eAAe,MAAM,yBAAyB,CAAC;AAQtD,IAAM,UAAU,GAAsB,EAAE,CAAC;AAEzC,IAAM,eAAe,GAAG,UAAC,cAAsB,EAAE,MAAc;IAC7D,IAAM,IAAI,GAAM,cAAc,gBAAa,CAAC;IAE5C,GAAG,CAAC,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAClC,CAAC,CAAC;AAEF,IAAM,aAAa,GAAG,UACpB,cAAsB,EACtB,YAAoB,EACpB,KAAa;IAEb,IAAM,IAAI,GAAM,cAAc,SAAI,YAAY,SAAM,CAAC;IAErD,GAAG,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACjC,CAAC,CAAC;AAEF,IAAM,WAAW,GAAG,UAClB,GAEC,EACD,cAAsB,EACtB,YAAoB;IAEpB,GAAG,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IAE/B,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAgB;QAC5B,IAAA,IAAI,GAAY,KAAK,KAAjB,EAAE,KAAK,GAAK,KAAK,MAAV,CAAW;QAE9B,IAAI,IAAI,KAAK,eAAe,EAAE;YAC5B,IAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC;YACtC,IAAM,YAAY,GAAG,eAAe,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;YAE7D,aAAa,CAAC,cAAc,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;YAEnD,UAAU,CAAC,IAAI,CAAC;gBACd,QAAQ,UAAA;gBACR,YAAY,cAAA;gBACZ,QAAQ,EAAK,YAAY,SAAM;aAChC,CAAC,CAAC;SACJ;IACH,CAAC,CAAC,CAAC;IAEH,eAAe,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC;AAEF,MAAM,CAAC,OAAO,GAAG,UAAU,MAAc;IACvC,IAAM,OAAO,GAAG,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,EACxC,YAAY,GAAK,IAAW,aAAhB,EACd,GAAG,GAAG,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAErC,WAAW,CAAC,GAAG,EAAE,OAAO,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;IAEvD,OAAO,oBAAkB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAG,CAAC;AACrD,CAAC,CAAC","sourcesContent":["import fse from \"fs-extra\";\nimport { IASTChild, IASTPosition, CODE_IDENTIFIER } from \"markdown-site-shared\";\nimport markdownParser from \"./utils/parser\";\nimport loaderUtils from \"loader-utils\";\nimport genCodeFileName from \"./utils/genCodeFileName\";\n\ninterface ICodeConfigItem {\n  position: IASTPosition;\n  resourcePath: string;\n  codePath: string;\n}\n\nconst codeConfig: ICodeConfigItem[] = [];\n\nconst writeCodeConfig = (codeOutputPath: string, config: string) => {\n  const path = `${codeOutputPath}/index.json`;\n\n  fse.writeFileSync(path, config);\n};\n\nconst writeCodeFile = (\n  codeOutputPath: string,\n  codeFileName: string,\n  value: string\n) => {\n  const path = `${codeOutputPath}/${codeFileName}.tsx`;\n\n  fse.writeFileSync(path, value);\n};\n\nconst extractCode = (\n  ast: {\n    children: IASTChild[];\n  },\n  codeOutputPath: string,\n  resourcePath: string\n) => {\n  fse.mkdirsSync(codeOutputPath);\n\n  ast.children.forEach((child: IASTChild) => {\n    const { type, value } = child;\n\n    if (type === CODE_IDENTIFIER) {\n      const position = child.position.start;\n      const codeFileName = genCodeFileName(resourcePath, position);\n\n      writeCodeFile(codeOutputPath, codeFileName, value);\n\n      codeConfig.push({\n        position,\n        resourcePath,\n        codePath: `${codeFileName}.tsx`,\n      });\n    }\n  });\n\n  writeCodeConfig(codeOutputPath, JSON.stringify(codeConfig));\n};\n\nmodule.exports = function (source: string) {\n  const options = loaderUtils.getOptions(this),\n    { resourcePath } = this as any,\n    ast = markdownParser.parse(source);\n\n  extractCode(ast, options.codeOutputPath, resourcePath);\n\n  return `export default ${JSON.stringify(source)};`;\n};\n"]}